제어자(modifier)

클래스와 클래스의 멤버(ex. 멤버 변수, 메서드)에 부가적인 의미 부여
하나의 대상에 여러 제어자를 같이 사용가능(접근 제어자는 하나만)

접근 제어자: public, protected, (default), private
그 외: static, final, abstract, native, transient, synchronized...)
접근 제어자는 멤버 또는 클래스에 사용되어, 해당되는 멤버 또는 클래스를 외부에서 접근하지 못하도록 제한하는 역할을 함.

public > protected > (default) > private 순으로 접근 범위를 나타낼 수 있음. (넓은 쪽 -> 좁은 쪽)
public: 접근 제한 전혀 없음
protected: 패키지에 관계없이 상속관계에 있는 자손클래스에서 접근할 수 있도록, 같은 패키지내끼리도 접근 가능
default: 같은 패키지내의 클래스끼리만 접근 가능
private: 같은 클래스 내에서만 접근 가능, 인스턴스 생성 x

접근 제어자를 사용하는 이유: 클래스의 내부에 선언된 데이터를 보호하기 위함.(data hiding, 캡슐화)
                         클래스 내에서만 사용되는 내부 작업을 위해 임시로 사용되는 멤버변수나 부분작업을 처리하기 위한
                         메서드 등을 클래스 내부에 감추기 위해

static: 클래스의, 공통적인(전역변수 느낌)
final: 마지막의, 변경될 수 없는(상수 느낌)

abstract: 추상의, 미완성의
추상 클래스, 메서드의 선언부만 작성하고 실제 수행내용은 구현하지 않은 추상 메서드를 선언하는데 사용됨.
클래스, 메서드에서 사용 가능, 추상 클래스는 아직 미완성이므로 인스턴스 생성 x


