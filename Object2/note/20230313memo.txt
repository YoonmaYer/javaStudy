인터페이스

추상클래스와 비슷한 용도지만,(추상메서드o) 추상클래스보다 추상화 정도가 높음.
따라서 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없음.
only 추상메서드, 상수

선언 키워드: interface(public, default 허용)
구현 키워드: implements(상속과 구현 동시에 가능)

인터페이스의 멤버들은 다음과 같은 제약사항이 있음
1. 모든 멤버변수는 public, static, final 이어야 하며, 이를 생략할 수 있다.
2. 모든 메서드는 public, abstract 이어야 하며, 이를 생략할 수 있다.
보통 편의상 생략하는 경우가 많음. (컴파일러가 자동으로 해줌)

인터페이스는 인터페이스로부터만 상속받을 수 있음. 클래스와는 달리 다중상속이 가능(...?)

리턴타입이 인터페이스라는 것은 해당 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것(중요)

인터페이스의 장점
1. 개발시간을 단축시킬 수 있음.
2. 표준화 가능
3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있음.
4. 독립적 프로그래밍 가능

인터페이스의 이해
1. 클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다.
2. 메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다.(내용은 몰라도 됨)
